name: WordPress Theme Check

on:
  pull_request:
    types: [opened, labeled, synchronize]

jobs:
  theme-check:
    if: startsWith(github.event.label.name, 'New Theme')
    runs-on: ubuntu-latest
    
    services:
      wordpress:
        image: wordpress:php8.2
        ports:
          - 8080:80
        env:
          WORDPRESS_DB_HOST: db
          WORDPRESS_DB_USER: wordpress
          WORDPRESS_DB_PASSWORD: wordpress
          WORDPRESS_DB_NAME: wordpress
      db:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: rootpassword
          MYSQL_DATABASE: wordpress
          MYSQL_USER: wordpress
          MYSQL_PASSWORD: wordpress

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Install WP-CLI inside WordPress container
      run: |
        docker exec $(docker ps -qf "ancestor=wordpress:php8.2") curl -O https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar
        docker exec $(docker ps -qf "ancestor=wordpress:php8.2") chmod +x wp-cli.phar
        docker exec $(docker ps -qf "ancestor=wordpress:php8.2") mv wp-cli.phar /usr/local/bin/wp

    - name: Wait for WordPress
      run: |
        timeout 300 bash -c 'while [[ "$(curl -s -o /dev/null -w ''%{http_code}'' localhost:8080)" != "302" ]]; do sleep 5; done' || false
    
    - name: Complete WordPress Installation
      run: |
        docker exec $(docker ps -qf "ancestor=wordpress:php8.2") wp core install \
          --url=http://localhost:8080 \
          --title="Test Site" \
          --admin_user=admin \
          --admin_password=admin_password \
          --admin_email=admin@example.com \
          --skip-email \
          --allow-root

    - name: Test WP-CLI
      run: docker exec $(docker ps -qf "ancestor=wordpress:php8.2") wp --info

    - name: Get first changed root folder
      uses: actions/github-script@v6
      with:
        script: |
            const { owner, repo, number } = context.issue;
            const { data: files } = await github.rest.pulls.listFiles({
              owner,
              repo,
              pull_number: number,
            });
            
            let firstRootFolder = '.';
            for (const file of files) {
              const parts = file.filename.split('/');
              if (parts.length > 1) {
                firstRootFolder = parts[0];
                break;
              }
            }
            
            core.exportVariable('THEME_FOLDER', firstRootFolder);
            console.log(`First changed root folder: ${firstRootFolder}`);

    - name: Debug ADDED_FOLDER
      run: echo "ADDED_FOLDER is ${{ env.THEME_FOLDER }}"

    - name: Install and activate theme
      run: |
        docker cp ${{ github.workspace }}/${{ env.THEME_FOLDER }} $(docker ps -qf "ancestor=wordpress:php8.2"):/var/www/html/wp-content/themes/
        docker exec $(docker ps -qf "ancestor=wordpress:php8.2") wp theme activate ${{ env.THEME_FOLDER }} --allow-root

    - name: Install and activate Theme Check plugin
      run: |
        docker exec $(docker ps -qf "ancestor=wordpress:php8.2") wp plugin install theme-check --activate --allow-root

    - name: Run Theme Check
      id: theme_check
      run: |
        THEME_CHECK_RESULT=$(docker exec $(docker ps -qf "ancestor=wordpress:php8.2") wp theme check ${{ env.THEME_FOLDER }} --format=json --allow-root)
        echo "THEME_CHECK_RESULT<<EOF" >> $GITHUB_ENV
        echo "$THEME_CHECK_RESULT" >> $GITHUB_ENV
        echo "EOF" >> $GITHUB_ENV

    - name: Comment PR
      uses: actions/github-script@v6
      with:
        github-token: ${{secrets.GITHUB_TOKEN}}
        script: |
          const themeCheckResult = process.env.THEME_CHECK_RESULT;
          const parsedResult = JSON.parse(themeCheckResult);
          
          let comment = `## Theme Check Results for ${process.env.THEME_FOLDER}\n\n`;
          
          for (const check of parsedResult) {
            comment += `### ${check.name}\n`;
            comment += `**Type:** ${check.type}\n`;
            comment += `**Description:** ${check.description}\n\n`;
          }
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });